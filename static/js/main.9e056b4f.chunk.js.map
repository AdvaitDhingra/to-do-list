{"version":3,"sources":["components/firebase.js","components/notes.js","components/icons8-google.svg","components/login.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","analytics","Notes","useState","notes","setNotes","useEffect","firestore","collection","onSnapshot","snap","forEach","doc","push","data","console","log","map","note","Login","Button","onClick","signInWithPopup","then","result","credential","accessToken","user","catch","error","code","message","email","style","position","top","left","transform","variant","src","GoogleIcon","alt","Main","noteDialogOpen","setNoteDialogOpen","currentNote","setCurrentNote","setUser","onAuthStateChanged","uid","width","height","backgroundColor","Fab","color","aria-label","right","bottom","Dialog","open","onClose","padding","DialogTitle","Typography","Input","marginLeft","marginRight","marginBottom","type","multiline","placeholder","onChange","e","target","value","varient","preventDefault","add","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e056b4f.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAGOs2uu2wsWwnWeiRoe-sSRtKkXg1H_As\",\r\n    authDomain: \"course-match-d0348.firebaseapp.com\",\r\n    databaseURL: \"https://course-match-d0348.firebaseio.com\",\r\n    projectId: \"course-match-d0348\",\r\n    storageBucket: \"course-match-d0348.appspot.com\",\r\n    messagingSenderId: \"746587302289\",\r\n    appId: \"1:746587302289:web:0295b94dfaeb9013c75230\",\r\n    measurementId: \"G-F619DFSCN6\"\r\n  };\r\n  // Initialize Firebase\r\n  var fire = firebase.initializeApp(firebaseConfig);\r\n  export var provider = new firebase.auth.GoogleAuthProvider();\r\n  firebase.analytics();\r\n\r\n  export default fire\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport fire from './firebase'\r\n\r\nconst Notes = () => {\r\n    const [notes, setNotes] = useState([])\r\n\r\n    useEffect(() => {\r\n        fire.firestore().collection(\"notes\").onSnapshot(snap => {\r\n            var notess = []\r\n            snap.forEach(doc => {\r\n                notes.push(doc.data())\r\n            })\r\n            setNotes(notess)\r\n        })\r\n        console.log(notes)\r\n    }, [])\r\n    return(\r\n        <div>\r\n            {\r\n                notes.map(note => {\r\n                    return(\r\n                        <div>\r\n                            <p>{note}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Notes","export default __webpack_public_path__ + \"static/media/icons8-google.b40778ce.svg\";","import Button from '@material-ui/core/Button'\r\n\r\nimport GoogleIcon from './icons8-google.svg'\r\n\r\nimport fire, { provider } from './firebase'\r\n\r\nconst Login = () => {\r\n    function signIn(){\r\n        fire.auth()\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n                var credential = result.credential;\r\n\r\n                // This gives you a Google Access Token. You can use it to access the Google API.\r\n                var token = credential.accessToken;\r\n                // The signed-in user info.\r\n                var user = result.user;\r\n                // ...\r\n            }).catch((error) => {\r\n                // Handle Errors here.\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                // The email of the user's account used.\r\n                var email = error.email;\r\n                // The firebase.auth.AuthCredential type that was used.\r\n                var credential = error.credential;\r\n                // ...\r\n            });\r\n    }\r\n    return(\r\n        <div>\r\n            <Button onClick = {signIn} style = {{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\"\r\n            }} variant = \"contained\">Sign In with Google <img  src = {GoogleIcon} alt = \"google\"/></Button>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import { Dialog, Fab, Typography, DialogTitle, Input, Button } from \"@material-ui/core\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport fire from './firebase'\r\n\r\nimport Notes from './notes'\r\n\r\nimport Login from './login'\r\n\r\nconst Main = () => {\r\n    const [noteDialogOpen, setNoteDialogOpen] = useState(false);\r\n\r\n    const [currentNote, setCurrentNote] = useState(\"\")\r\n\r\n    const [user, setUser] = useState({})\r\n\r\n    useEffect(() => {\r\n        fire.auth().onAuthStateChanged(user => {\r\n            if (user && user.uid == \"AtpgkAlgDiV0dQ5zuQtQIwRGQNQ2\"){\r\n                setUser(user)\r\n            }\r\n            else{\r\n                setUser(null)\r\n            }\r\n        })\r\n    })\r\n\r\n    function newNote(){\r\n        setNoteDialogOpen(true)\r\n    }\r\n    function uploadNote(e){\r\n        e.preventDefault()\r\n\r\n        fire    \r\n            .firestore()\r\n            .collection(\"notes\")\r\n            .add({\r\n                note: currentNote\r\n            }).then({\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        setCurrentNote(\"\")\r\n        setNoteDialogOpen(false)\r\n    }\r\n    return(\r\n        user ? (\r\n            <div style = {{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n            }}>\r\n                <div style = {{\r\n                    backgroundColor: \"white\",\r\n                    position: \"absolute\",\r\n                    top: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"auto\"\r\n                }}>\r\n                    <Notes/>\r\n                </div>\r\n                <Fab onClick = {newNote} color = \"primary\" aria-label = \"add\" style = {{\r\n                    position: \"fixed\",\r\n                    right: \"10%\",\r\n                    bottom: \"10%\"\r\n                }}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Dialog open = {noteDialogOpen} onClose = {() => setNoteDialogOpen(false)} style = {{\r\n                    padding: \"20px 20px\"\r\n                }}>\r\n                    <DialogTitle>\r\n                        <Typography>\r\n                            Add a new note\r\n                        </Typography>\r\n                    </DialogTitle>\r\n                    <form>\r\n                    <Input style = {{\r\n                        width: \"500px\",\r\n                        height: \"200px\",\r\n                        marginLeft: \"20px\",\r\n                        marginRight: \"20px\",\r\n                        marginBottom: \"20px\"\r\n                    }}type = \"text\" multiline placeholder = \"Reminder/Note?\" onChange = {(e) => setCurrentNote(e.target.value)}/>\r\n                    <Button color = \"primary\" varient = \"contained\" onClick = {uploadNote}>Add</Button>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n        ) : (\r\n            <div>\r\n                <Login/>\r\n            </div>\r\n        )\r\n    )\r\n}\r\nexport default Main","import './App.css';\r\n\r\nimport Main from './components/main'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}